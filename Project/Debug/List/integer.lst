###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     23/Mar/2016  10:37:15 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\code\STM32\FreeRTOS\Common\Minimal\integer.c          #
#    Command line =  E:\code\STM32\FreeRTOS\Common\Minimal\integer.c -D       #
#                    VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN                       #
#                    E:\code\STM32\FreeRTOS\RTOS_test\Debug\List\             #
#                    --diag_suppress Pa082,pe191 -o                           #
#                    E:\code\STM32\FreeRTOS\RTOS_test\Debug\Obj\ --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    E:\code\STM32\FreeRTOS\RTOS_test\.\ -I                   #
#                    E:\code\STM32\FreeRTOS\RTOS_test\STM32F10xFWLib\inc\ -I  #
#                    E:\code\STM32\FreeRTOS\RTOS_test\..\..\Source\include\   #
#                    -I E:\code\STM32\FreeRTOS\RTOS_test\..\common\include\   #
#                    -Ol --use_c++_inline --require_prototypes                #
#    List file    =  E:\code\STM32\FreeRTOS\RTOS_test\Debug\List\integer.lst  #
#    Object file  =  E:\code\STM32\FreeRTOS\RTOS_test\Debug\Obj\integer.o     #
#                                                                             #
#                                                                             #
###############################################################################

E:\code\STM32\FreeRTOS\Common\Minimal\integer.c
      1          /*
      2              FreeRTOS V9.0.0rc1 - Copyright (C) 2016 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /*
     71           * Creates one or more tasks that repeatedly perform a set of integer
     72           * calculations.  The result of each run-time calculation is compared to the 
     73           * known expected result - with a mismatch being indicative of an error in the
     74           * context switch mechanism.
     75           */
     76          
     77          #include <stdlib.h>
     78          
     79          /* Scheduler include files. */
     80          #include "FreeRTOS.h"
     81          #include "task.h"
     82          
     83          /* Demo program include files. */
     84          #include "integer.h"
     85          
     86          /* The constants used in the calculation. */
     87          #define intgCONST1				( ( long ) 123 )
     88          #define intgCONST2				( ( long ) 234567 )
     89          #define intgCONST3				( ( long ) -3 )
     90          #define intgCONST4				( ( long ) 7 )
     91          #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
     92          
     93          #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
     94          
     95          /* As this is the minimal version, we will only create one task. */
     96          #define intgNUMBER_OF_TASKS		( 1 )
     97          
     98          /* The task function.  Repeatedly performs a 32 bit calculation, checking the
     99          result against the expected result.  If the result is incorrect then the
    100          context switch must have caused some corruption. */
    101          static portTASK_FUNCTION_PROTO(vCompeteingIntMathTask, pvParameters);
    102          
    103          /* Variables that are set to true within the calculation task to indicate
    104          that the task is still executing.  The check task sets the variable back to
    105          false, flagging an error if the variable is still false the next time it
    106          is called. */
    107          static volatile BaseType_t xTaskCheck[intgNUMBER_OF_TASKS] = { (BaseType_t) pdFALSE };
    108          
    109          /*-----------------------------------------------------------*/
    110          
    111          void vStartIntegerMathTasks(UBaseType_t uxPriority)
    112          {
    113              short sTask;
    114          
    115              for (sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++)
    116              {
    117                  xTaskCreate(vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, (void *) &(xTaskCheck[sTask]), uxPriority,
    118                              (TaskHandle_t *) NULL);
    119              }
    120          }
    121          
    122          /*-----------------------------------------------------------*/
    123          
    124          static portTASK_FUNCTION(vCompeteingIntMathTask, pvParameters)
    125          {
    126          /* These variables are all effectively set to constants so they are volatile to
    127          ensure the compiler does not just get rid of them. */
    128              volatile long lValue;
    129              short sError = pdFALSE;
    130              volatile BaseType_t *pxTaskHasExecuted;
    131          
    132              /* Set a pointer to the variable we are going to set to true each
    133                 iteration.  This is also a good test of the parameter passing mechanism
    134                 within each port. */
    135              pxTaskHasExecuted = (volatile BaseType_t *) pvParameters;
    136          
    137              /* Keep performing a calculation and checking the result against a constant. */
    138              for (;;)
    139              {
    140                  /* Perform the calculation.  This will store partial value in
    141                     registers, resulting in a good test of the context switch mechanism. */
    142                  lValue = intgCONST1;
    143                  lValue += intgCONST2;
    144          
    145                  /* Yield in case cooperative scheduling is being used. */
    146          #if configUSE_PREEMPTION == 0
    147                  {
    148                      taskYIELD();
    149                  }
    150          #endif
    151          
    152                  /* Finish off the calculation. */
    153                  lValue *= intgCONST3;
    154                  lValue /= intgCONST4;
    155          
    156                  /* If the calculation is found to be incorrect we stop setting the 
    157                     TaskHasExecuted variable so the check task can see an error has 
    158                     occurred. */
    159                  if (lValue != intgEXPECTED_ANSWER)  /*lint !e774 volatile used to prevent this being optimised out. */
    160                  {
    161                      sError = pdTRUE;
    162                  }
    163          
    164                  if (sError == pdFALSE)
    165                  {
    166                      /* We have not encountered any errors, so set the flag that show
    167                         we are still executing.  This will be periodically cleared by
    168                         the check task. */
    169                      portENTER_CRITICAL();
    170                      *pxTaskHasExecuted = pdTRUE;
    171                      portEXIT_CRITICAL();
    172                  }
    173          
    174                  /* Yield in case cooperative scheduling is being used. */
    175          #if configUSE_PREEMPTION == 0
    176                  {
    177                      taskYIELD();
    178                  }
    179          #endif
    180              }
    181          }
    182          
    183          /*-----------------------------------------------------------*/
    184          
    185          /* This is called to check that all the created tasks are still running. */
    186          BaseType_t xAreIntegerMathsTaskStillRunning(void)
    187          {
    188              BaseType_t xReturn = pdTRUE;
    189              short sTask;
    190          
    191              /* Check the maths tasks are still running by ensuring their check variables 
    192                 are still being set to true. */
    193              for (sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++)
    194              {
    195                  if (xTaskCheck[sTask] == pdFALSE)
    196                  {
    197                      /* The check has not incremented so an error exists. */
    198                      xReturn = pdFALSE;
    199                  }
    200          
    201                  /* Reset the check variable so we can tell if it has been set by
    202                     the next time around. */
    203                  xTaskCheck[sTask] = pdFALSE;
    204              }
    205          
    206              return xReturn;
    207          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  vCompeteingIntMathTask
              8 -> vPortEnterCritical
              8 -> vPortExitCritical
       32  vStartIntegerMathTasks
             32 -> xTaskGenericCreate
        0  xAreIntegerMathsTaskStillRunning


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "IntMath">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      70  vCompeteingIntMathTask
      60  vStartIntegerMathTasks
      40  xAreIntegerMathsTaskStillRunning
       4  xTaskCheck

 
   4 bytes in section .bss
   8 bytes in section .rodata
 182 bytes in section .text
 
 182 bytes of CODE  memory
   8 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
